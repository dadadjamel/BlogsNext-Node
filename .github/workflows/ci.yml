name : CI pipeline

# Trigger the pipeline on pushes and pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    # Define Docker as a service to enable building and running containers
    services:
      docker:
        image: docker:24.0.2 # Latest stable version of Docker
        options: --privileged
    

    steps:
     # Step 1: Checkout the repository
     - name: Checkout
       uses: actions/checkout@v4
      
    # Step 2: Set up Docker Buildx for building Docker images
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v3
    
    # Step 3: Set up cache for Docker layers to speed up subsequent builds
     - name: Cache Docker layers
       uses: actions/cache@v4
       with:
         path: /tmp/.buildx-cache
         key: ${{ runner.os }}-buildx-${{ github.sha }}
         restore-keys: |
           ${{ runner.os }}-buildx-
     
      # Step 4: Build the backend service
     - name: Build Backend
       run: |
          docker-compose -f docker-compose.yml build backend

      # Step 5: Build the frontend service
     - name: Build Frontend
       run: |
          docker-compose -f docker-compose.yml build frontend
        
      # Step 6: Set up cache for Node.js dependencies for both backend and frontend services
     - name: Cache Node.js dependencies
       uses: actions/cache@v4
       with:
         path: |
          ./backend/node_modules
          ./frontend/my-app/node_modules
         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
         restore-keys: |
           ${{ runner.os }}-nodemodule-

      # Step 7: Run Backend Tests
     - name: Run Backend Tests
       run: |
          docker-compose -f docker-compose.yml run --rm backend npm run test

      # Step 8: Run Frontend Tests
     - name: Run Frontend Tests
       run: |
          docker-compose -f docker-compose.yml run --rm frontend npm run test

