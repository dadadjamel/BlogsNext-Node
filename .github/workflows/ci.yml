name: CI Pipeline

# Trigger the pipeline on pushes and pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install Docker Compose once, instead of in each job
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers once for both frontend and backend
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build Backend
      - name: Build Backend
        run: docker-compose -f docker-compose.yml build backend

      # Build Frontend
      - name: Build Frontend
        run: docker-compose -f docker-compose.yml build frontend

      # Cache Node.js dependencies for both frontend and backend
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./backend/node_modules
            ./frontend/my-app/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  # run-tests:
  #   runs-on: ubuntu-latest
  #   needs: build  # This ensures the tests run only after the build job succeeds

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     # Install Docker Compose again for this job (as each job is isolated)
  #     - name: Install Docker Compose
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker-compose

  #     # Run frontend tests
  #     - name: Run Frontend Tests
  #       run: docker-compose -f docker-compose.yml run frontend npm test

  #     - name: Run Tests Backend
  #       run: docker-compose -f docker-compose.yml run backend npm test
  
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Deploy to Azure VM using SSH
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            sudo systemctl start docker
            cd /home/djamel/myapp
            git pull origin main
            sudo docker-compose down
            sudo docker-compose up --build -d

